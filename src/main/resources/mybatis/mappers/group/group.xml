<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="group">
    <resultMap id="groupResult" type="groupVO">
        <result property="groupNum" column="groupNum" />
        <result property="name" column="name" />
        <result property="type" column="type" />
        <result property="staffCurrent" column="staffCurrent" />
        <result property="staffMax" column="staffMax" />
        <result property="detail" column="detail" />
        <result property="status" column="status" />
        <result property="startDay" column="startDay" />
        <result property="createdAt" column="createdAt" />
        <result property="updatedAt" column="updatedAt" />
        <result property="area" column="area" />
        <result property="ageStart" column="ageStart" />
        <result property="ageEnd" column="ageEnd" />
        <result property="sex" column="sex" />
        <result property="mtNm" column="mtNm" />
    </resultMap>
    
    <insert id="insertGroup"  parameterType="map">
        <selectKey keyProperty="groupNum" resultType="_int" order="BEFORE">
            SELECT groups_seq.nextval
            FROM dual
        </selectKey>
        <![CDATA[
            INSERT INTO groups
            VALUES (
                #{groupNum},
                #{name},
                1,
                1,
                #{staffMax},
                #{detail},
                1,
                #{startDay},
                sysdate,
                sysdate,
                #{area},
                #{ageStart},
                #{ageEnd},
                #{sex},
                #{mtNm}
                )
        ]]>
    </insert>

    <insert id="insertGroupLeader" parameterType="map">
        <![CDATA[
            INSERT INTO userWaiting
            VALUES (
                #{groupNum},
                #{userId},
                0,
                null,
                0
                )
        ]]>
    </insert>

    <!-- 메인 리스트 6개 불러오기 (좋아요순) -->
    <select id="selectMainGroupList" resultType="map">
        <![CDATA[
            SELECT g.groupNum, g.name, g.staffCurrent, g.staffmax, g.detail, g.status, TO_CHAR(g.startDay,'yyyy"년"MM"월"dd"일"') startDay, gm.storedFileName, NVL(ui.CONTENT2,'basic_profile.PNG') content2, COUNT(gl.groupNum) likeCount
            FROM groups g
               INNER JOIN groupsMedia gm
                ON g.groupNum = gm.groupNum
               INNER JOIN userWaiting uw
                ON g.groupNum = uw.groupNum
               INNER JOIN users u
                ON uw.userId = u.id
               INNER JOIN userInfo ui
                ON u.userNum = ui.userNum
               LEFT OUTER JOIN groupLike gl
                ON g.groupNum = gl.groupNum
            WHERE g.type = 1
              AND uw.userType = 0
              AND gm.mediaNum = 0
              AND ROWNUM <=6
            GROUP BY g.groupNum, g.name, g.staffCurrent, g.staffmax, g.detail, g.status, g.startDay, gm.storedFileName, ui.CONTENT2
            ORDER BY NVL(COUNT(gl.LIKEYN),0) DESC
        ]]>
    </select>

    <!-- 산오르기 등산모임 리스트 페이지 (수정중) -->
    <select id="selectAllGroupList" resultType="map">
        <![CDATA[
            SELECT g.groupNum, g.name, g.staffCurrent, g.staffmax, g.detail, g.status, TO_CHAR(g.startDay,'yyyy"년"MM"월"dd"일"') startDay, gm.storedFileName, NVL(ui.CONTENT2,'basic_profile.PNG') content2
            FROM groups g
            INNER JOIN groupsMedia gm
                    ON g.groupNum = gm.groupNum
            INNER JOIN userWaiting uw
                    ON g.groupNum = uw.groupNum
            INNER JOIN users u
                    ON uw.userId = u.id
            INNER JOIN userInfo ui
                    ON u.userNum = ui.userNum
            WHERE g.type = 1
              AND uw.userType = 0
              AND gm.mediaNum = 0
              AND ROWNUM <=6
            ORDER BY g.createdAt DESC
        ]]>
    </select>

    <update id="updateGroup" parameterType="groupVO">
            UPDATE groups
            SET name = #{name},
                staffMax = #{staffMax},
                detail = #{detail},
                updatedAt = sysdate,
                area = #{area},
                ageStart = #{ageStart},
                ageEnd = #{ageEnd},
                sex = #{sex}
        <where>
            <if test="groupNum != '' and groupNum != null">
                groupNum = #{groupNum}
            </if>
        </where>
    </update>

    <delete id="deleteGroup" parameterType="map">
        DELETE FROM groups
        WHERE groupNum = #{groupNum}
    </delete>

    <select id="selectGroupDetail" resultType="map" parameterType="_int">
        <![CDATA[
            SELECT g.groupNum,
                   g.name,
                   g.staffCurrent,
                   g.staffMax,
                   g.detail,
                   g.status,
                   TO_CHAR(g.startday,'yyyy"년" MM"월"dd"일" hh"시"mm"분"') startday,
                   TO_CHAR(g.createdAt,'yyyy"년" MM"월"dd"일" hh"시"mm"분"') createdAt,
                   TO_CHAR(g.updatedAt,'yyyy"년" MM"월"dd"일" hh"시"mm"분"') updatedAt,
                   g.area,
                   g.ageStart,
                   g.ageEnd,
                   g.sex,
                   g.mtNm,
                   uw.userId,
                   ui.content2
            FROM groups g, userWaiting uw, users u, userInfo ui
            WHERE g.groupNum = uw.groupNum
              AND uw.userId = u.id
              AND u.userNum = ui.userNum
              AND uw.userType = 0
              AND g.groupNum = #{groupNum}
        ]]>
    </select>

    <select id="selectGroupDetailImage" resultType="map" parameterType="_int">
        <![CDATA[
            SELECT storedFileName
            FROM groupsMedia
            WHERE groupNum = #{groupNum}
        ]]>
    </select>

    <select id="selectGroupsByKeyword" resultType="map" parameterType="string">
        <![CDATA[
            SELECT *
            FROM groups
        ]]>
        <where>
            <if test="value != '' and value != null">
                name LIKE '%'||#{keyword}||'%'
                OR area LIKE '%'||#{keyword}||'%'
                OR detail LIKE '%'||#{keyword}||'%'
            </if>
        </where>
    </select>

    <!-- 그룹 가입 -->
    <update id="joinGroup" parameterType="map">
        <![CDATA[
            MERGE INTO userWaiting
            USING DUAL
            ON (groupNum=#{groupNum} AND userId=#{userId})
            WHEN MATCHED THEN
                UPDATE SET
                userStatus = 1
            WHEN NOT MATCHED THEN
                INSERT (groupNum,
                        userId,
                        userType,
                        userComment,
                        userStatus)
                VALUES (#{groupNum},
                        #{userId},
                        1,
                        #{userComment},
                        1)
        ]]>
    </update>
    <!-- 그룹 탈퇴 -->
    <update id="withdrawGroup" parameterType="map">
        <![CDATA[
            UPDATE userWaiting
            SET userStatus = 2
            WHERE groupNum = #{groupNum}
            AND userId = #{userId}
        ]]>
    </update>
    <!-- 그룹 가입 여부 체크 -->
    <select id="selectWaiting" resultType="_int" parameterType="map">
        <![CDATA[
            SELECT userStatus
            FROM userWaiting
            WHERE userId = #{userId}
            AND groupNum = #{groupNum}
        ]]>
    </select>

    <!-- 그룹 가입 요청 리스트 불러오기 -->
    <select id="selectWaitingList" resultType="map" parameterType="map">
        <![CDATA[
            SELECT userId, userStatus
            FROM userWaiting
            WHERE groupNum = #{groupNum}
            AND userStatus IN (0,1)
            AND userId NOT IN (#{userId})
        ]]>
    </select>

    <update id="userAllowed" parameterType="map">
        <![CDATA[
            UPDATE userWaiting
            SET userStatus = 0
            WHERE userId = #{userId}
            AND groupNum = #{groupNum}
        ]]>
    </update>

    <update id="userDisallowed" parameterType="map">
        <![CDATA[
            UPDATE userWaiting
            SET userStatus = 1
            WHERE userId = #{userId}
            AND groupNum = #{groupNum}
        ]]>
    </update>

    <select id="checkGroupExpired" resultType="_int" parameterType="_int">
        <![CDATA[
            select STAFFCURRENT, STAFFMAX
            from groups
            where groupNum = #{groupNum}
            AND STAFFCURRENT=STAFFMAX
        ]]>
    </select>
    <update id="expiredGroup" parameterType="_int">
        <![CDATA[
            UPDATE groups
            SET status = 0
            WHERE groupNum = #{groupNum}
        ]]>
    </update>

    <update id="updateGroupCount" parameterType="map">
        <choose>
            <when test="action.equals('plus')">
                UPDATE groups
                SET staffCurrent = staffCurrent + 1
                WHERE groupNum = #{groupNum}
            </when>
            <when test="action.equals('minus')">
                UPDATE groups
                SET staffCurrent = staffCurrent - 1
                WHERE groupNum = #{groupNum}
            </when>
        </choose>
    </update>

    <!-- 그룹 좋아요 -->
    <insert id="insertFavorite" parameterType="map">
        <![CDATA[
            INSERT INTO groupLike
            VALUES (
                #{groupNum},
                #{userId},
                1,
                sysdate
            )
        ]]>
    </insert>

    <!-- 그룹 좋아요 체크 -->
    <select id="checkFavoriteGroup" resultType="_int" parameterType="map">
        <![CDATA[
            SELECT LIKEYN
            FROM GROUPLIKE
            WHERE userId = #{userId}
            AND groupNum = #{groupNum}
        ]]>
    </select>

    <!-- 그룹 좋아요 해제 -->
    <delete id="deleteFavoriteGroup" parameterType="map">
        <![CDATA[
            DELETE FROM grouplike
            WHERE userId = #{userId}
            AND groupNum = #{groupNum}
        ]]>
    </delete>

    <!-- 그룹 댓글 작성 -->
    <insert id="insertCommentGroup" useGeneratedKeys="true" keyProperty="commentNum" parameterType="map">
        <selectKey keyProperty="commentNum" resultType="_int" order="BEFORE">
            SELECT commentNum_seq.nextval
            FROM dual
        </selectKey>
        <![CDATA[
            INSERT INTO groupComment
            VALUES  (
                    #{commentNum},
                    #{parentNum},
                    #{depts},
                     (select NVL(MAX(commentOrder),0)+1
                     FROM groupComment
                     WHERE parentNum = #{parentNum}
                     AND groupNum = #{groupNum}),
                    #{groupNum},
                    #{content},
                    #{userId},
                    0,
                    sysdate
                    )
        ]]>
    </insert>

    <update id="updateSubCommentCount" parameterType="_int">
        <![CDATA[
            UPDATE groupComment
            SET subCommentCount = subCommentCount+1
            WHERE commentNum = #{commentNum}
        ]]>
    </update>

    <select id="selectCommentOne" parameterType="_int" resultType="groupCommentVO">
        <![CDATA[
            SELECT COMMENTNUM, PARENTNUM, DEPTS, COMMENTORDER, CONTENT, USERID, SUBCOMMENTCOUNT,CREATEDAT
            FROM GROUPCOMMENT
            WHERE commentNum = #{commentNum}
        ]]>
    </select>

    <select id="selectCommentByGroupNum" parameterType="_int" resultType="groupCommentVO">
        <![CDATA[
            SELECT gc.commentNum, gc.parentNum, gc.depts, gc.commentOrder, gc.content, gc.userId, gc.subCommentCount, gc.createdAt, ui.content2
            FROM groupComment gc, users u, userInfo ui
            WHERE gc.userId = u.id
            AND   u.userNum = ui.userNum
            AND   GROUPNUM = #{groupNum}
            START WITH PARENTNUM = 0
            CONNECT BY PRIOR COMMENTNUM = PARENTNUM
            ORDER SIBLINGS BY COMMENTORDER
        ]]>
    </select>

    <!-- 세션사용 유저 프로필 사진 조회 -->
    <select id="selectSessionIdImage" resultType="string" parameterType="string">
        <![CDATA[
            SELECT ui.CONTENT2
            FROM users u, userInfo ui
            WHERE u.userNum = ui.userNum
            AND u.id = #{value}
        ]]>
    </select>

    <select id="sortGroupByKeyword" resultType="map" parameterType="string">
        <if test="_parameter eq 'lately'.toString()">
            <![CDATA[
                SELECT g.groupNum, g.name, g.staffCurrent, g.staffmax, g.detail, g.status, TO_CHAR(g.startDay,'yyyy"년"MM"월"dd"일"') startDay, gm.storedFileName, NVL(ui.CONTENT2,'basic_profile.PNG') content2
                FROM groups g
                INNER JOIN groupsMedia gm
                ON g.groupNum = gm.groupNum
                INNER JOIN userWaiting uw
                ON g.groupNum = uw.groupNum
                INNER JOIN users u
                ON uw.userId = u.id
                INNER JOIN userInfo ui
                ON u.userNum = ui.userNum
                WHERE g.type = 1
                AND uw.userType = 0
                AND gm.mediaNum = 0
                AND ROWNUM <=6
                ORDER BY g.createdAt DESC
            ]]>
        </if>
        <if test="_parameter eq 'like'.toString()">
            <![CDATA[
                SELECT g.groupNum, g.name, g.staffCurrent, g.staffmax, g.detail, g.status, TO_CHAR(g.startDay,'yyyy"년"MM"월"dd"일"') startDay, gm.storedFileName, NVL(ui.CONTENT2,'basic_profile.PNG') content2, COUNT(gl.groupNum) likeCount
                FROM groups g
                   INNER JOIN groupsMedia gm
                    ON g.groupNum = gm.groupNum
                   INNER JOIN userWaiting uw
                    ON g.groupNum = uw.groupNum
                   INNER JOIN users u
                    ON uw.userId = u.id
                   INNER JOIN userInfo ui
                    ON u.userNum = ui.userNum
                   LEFT OUTER JOIN groupLike gl
                    ON g.groupNum = gl.groupNum
                WHERE g.type = 1
                  AND uw.userType = 0
                  AND gm.mediaNum = 0
                  AND ROWNUM <=6
                GROUP BY g.groupNum, g.name, g.staffCurrent, g.staffmax, g.detail, g.status, g.startDay, gm.storedFileName, ui.CONTENT2
                ORDER BY NVL(COUNT(gl.LIKEYN),0) DESC
            ]]>
        </if>
    </select>
    <select id="recommendGroup" resultType="map" parameterType="string">
        <![CDATA[
            SELECT *
            FROM groups
            WHERE mtnm = #{value}
        ]]>
    </select>
</mapper>