<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="admin.mapper.e_p006">
	<resultMap id="e_p006Result06" type="e_p006VO">
		<result property="csposttypeString" column="csposttypeString"/> <!-- 글구분 스트링 -->
		<result property="csboardcnt" column="csboardcnt"/> <!--글 구분 카운트  -->
		
		<result property="createdatString" column="createdatString"/> <!-- 매출일자 --> 
		<result property="sumPrice" column="sumPrice"/> <!--매출 금액  -->
	
		<result property="man" column="man"/> <!--남자  -->
		<result property="woman" column="woman"/> <!--여자  -->
		<result property="allUser" column="allUser"/> <!--전체 회원수  -->
		<result property="userCreatedat" column="userCreatedat"/> <!--회원 가입일자  -->
		
		<!--카테고리 통계  -->
		<result property="ordereDatString" column="ordereDatString"/> <!--판매일자  -->
		<result property="totalquantity" column="totalquantity"/> <!--판매수량 -->
		<result property="categorType" column="categorType"/> <!--카테고리타입 1-의류, 2-잡화, 3-등산용품 -->
		
		<!--메인 페이지 차트  -->
		<result property="datString" column="datString"/> <!--날짜 스트링 -->
		<result property="totalPrice" column="totalPrice"/> <!--승인 매출 -->
		<result property="totalCancel" column="totalCancel"/> <!--취소 매출-->
		
		<!--메인페이지 조회수 차트 카테고리별  -->
		<result property="sumCnt" column="sumCnt"/> <!--카테고리수-->
		<result property="categorytype" column="categorytype"/> <!--카테고리 타입-->
		
	</resultMap>

	
	<!--지정일자 조회  cs 글 통계 파이차트  -->
	<select id="searchDatePieChart" resultMap="e_p006Result06" parameterType="java.util.Map">
	<![CDATA[
	select DECODE (CSPOSTTYPE,100,'공지글',200,'문의글', 300,'신고글', 400, '이벤트')as csposttypeString, COUNT(*)as csboardcnt
	FROM cspost
    WHERE CREATEDAT BETWEEN TO_DATE(#{startDate},'YYYY-MM-DD') AND TO_DATE(#{endDate},'YYYY-MM-DD')
	group by DECODE (CSPOSTTYPE,100,'공지글',200,'문의글', 300,'신고글',400,'이벤트')
	]]>
	</select>
	
	<!--지정일자 조회 매출 통계  컬럼차트  -->
	<select id="searchDateColumnChart" resultMap="e_p006Result06" parameterType="java.util.Map">
	<![CDATA[
	select to_char(p.CREATEDAT, 'YYYY-MM-DD')as createdatString, sum(o.paytotal + o.charge)as sumPrice
	from orders o INNER JOIN payment p
	ON o.ordernum = p.ordernum
	WHERE p.createdat BETWEEN TO_DATE (#{startDate}, 'YYYY-MM-DD') AND TO_DATE (#{endDate}, 'YYYY-MM-DD')
	AND p.type != 'canceled'
	AND p.type != 'cancel'
	AND o.orderstatus =2
	GROUP BY to_char(p.CREATEDAT, 'YYYY-MM-DD')
	ORDER BY createdatString ASC
	]]>
	</select>
	
	<!--지정일자 조회 가입자 현황 라인차트 -->
	<select id="serchUserLineChart" resultMap="e_p006Result06" parameterType="java.util.Map">
	<![CDATA[
	select to_char(createdat, 'YYYY-MM-DD')as userCreatedat, count(DECODE(sex,10,'남자'))as man, count(DECODE(sex ,20, '여자'))as woman, COUNT(*)as allUser
	FROM users
	WHERE createdat BETWEEN TO_DATE(#{startDate},'YYYY-MM-DD') AND TO_DATE(#{endDate},'YYYY-MM-DD')
	group by to_char(createdat, 'YYYY-MM-DD')
	ORDER BY userCreatedat
	]]>
	</select>
	
	<!--지정일자 조회 가입자 현황 바차트  -->
	<select id="serchUserBarChart" resultMap="e_p006Result06" parameterType="java.util.Map">
	<![CDATA[
	select  count(DECODE(sex,10,'남자'))as man, count(DECODE(sex ,20, '여자'))as woman, COUNT(*)as allUser
	FROM users
	WHERE createdat BETWEEN TO_DATE(#{startDate},'YYYY-MM-DD') AND TO_DATE(#{endDate},'YYYY-MM-DD')
	]]>
	</select>
	
		<!--지정일자 조회 카테고리별 판매 수량  -->
	<select id="serchCategoryChart" resultMap="e_p006Result06" parameterType="java.util.Map">
	<![CDATA[
	SELECT DISTINCT to_char(pay.createdat,'YYYY-MM-DD')as ordereDatString,
		   DECODE(sum(a.totalquantity1),null,0,sum(a.totalquantity1))as type1,
		   DECODE(sum(b.totalquantity2),null,0,sum(b.totalquantity2))as type2,
		   DECODE(sum(c.totalquantity3),null,0,sum(c.totalquantity3))as type3
    FROM   orders o FULL OUTER JOIN (
                                SELECT sum(od.quantity)as totalquantity1,
                            to_char(od.ordereDat,'YYYY-MM-DD')as ordereDatString,
                            DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품')as categorType1,
                            od.ordernum
                    FROM products pd
                        INNER JOIN orders od
                    ON od.prodnum = pd.prodnum
                        INNER JOIN (SELECT CONNECT_BY_ROOT(pc.prodcategorynum)as top,pc.categoryname, pc.prodcategorynum
                                    FROM prodcategory pc
                                    START WITH pc.PARENTCATEGORYNUM is null
                                    CONNECT BY PRIOR pc.PRODCATEGORYNUM = pc.PARENTCATEGORYNUM)aa
                    ON aa.prodcategorynum = pd.prodcategorynum
                        WHERE od.orderstatus = 2
                        AND aa.top=1
                            group by to_char(od.ordereDat,'YYYY-MM-DD'), DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품'),od.ordernum
                        )a
                            ON a.ordernum = o.ordernum
                    FULL OUTER JOIN (SELECT sum(od.quantity)as totalquantity2,
                            to_char(od.ordereDat,'YYYY-MM-DD')as ordereDatString,
                            DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품')as categorType2,
                            od.ordernum
                    FROM products pd
                        INNER JOIN orders od
                    ON od.prodnum = pd.prodnum
                        INNER JOIN (SELECT CONNECT_BY_ROOT(pc.prodcategorynum)as top,pc.categoryname, pc.prodcategorynum
                                    FROM prodcategory pc
                                    START WITH pc.PARENTCATEGORYNUM is null
                                    CONNECT BY PRIOR pc.PRODCATEGORYNUM = pc.PARENTCATEGORYNUM)aa
                    ON aa.prodcategorynum = pd.prodcategorynum
                        WHERE od.orderstatus = 2
                        AND aa.top=2
                            group by to_char(od.ordereDat,'YYYY-MM-DD'), DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품'),od.ordernum
                        )b
                            ON b.ordernum = o.ordernum
                    FULL OUTER JOIN (
                            SELECT sum(od.quantity)as totalquantity3,
                            to_char(od.ordereDat,'YYYY-MM-DD')as ordereDatString,
                            DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품')as categorType2,
                            od.ordernum
                    FROM products pd
                        INNER JOIN orders od
                    ON od.prodnum = pd.prodnum
                        INNER JOIN (SELECT CONNECT_BY_ROOT(pc.prodcategorynum)as top,pc.categoryname, pc.prodcategorynum
                                    FROM prodcategory pc
                                    START WITH pc.PARENTCATEGORYNUM is null
                                    CONNECT BY PRIOR pc.PRODCATEGORYNUM = pc.PARENTCATEGORYNUM)aa
                    ON aa.prodcategorynum = pd.prodcategorynum
                        WHERE od.orderstatus = 2
                        AND aa.top=3
                            group by to_char(od.ordereDat,'YYYY-MM-DD'), DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품'),od.ordernum
                    )c
                        ON c.ordernum = o.ordernum
            INNER JOIN payment pay
                 ON pay.ordernum=o.ordernum
            WHERE pay.type !='cancel'
            AND pay.type != 'canceled'           
		    AND o.orderstatus = 2   
        WHERE pay.createdat BETWEEN TO_DATE(#{startDate},'YYYY-MM-DD') AND TO_DATE(#{endDate},'YYYY-MM-DD') 
        group by to_char(pay.createdat,'YYYY-MM-DD')
        ORDER BY ordereDatString
	]]>
	</select>
	
	
	<!-- 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 -->
	
	
	
	<!-- 셀렉트 조회 cs 글 통계  파이차트 -->
	<select id="selectPieChart" resultMap="e_p006Result06" parameterType="java.util.Map">
	<![CDATA[
	select DECODE (CSPOSTTYPE,100,'공지글',200,'문의글', 300,'신고글',400,'이벤트')as csposttypeString, COUNT(*)as csboardcnt
	FROM cspost 
    
	]]>
	<choose>
    		<when test="key_word=='all'"> <!-- 전체 조회  -->
    			group by DECODE (CSPOSTTYPE,100,'공지글',200,'문의글', 300,'신고글',400,'이벤트')
    		</when>
    		<when test="key_word=='toDay'"> <!-- 당일 조회 -->
    		 	WHERE CREATEDAT >= TO_DATE(#{st},'YYYY-MM-DD')
				group by DECODE (CSPOSTTYPE,100,'공지글',200,'문의글', 300,'신고글',400,'이벤트')
    		</when>
    		<when test="key_word=='week_month'"> <!-- 1주, 2주, 1개월 조회 -->
    		 	 WHERE CREATEDAT BETWEEN TO_DATE(#{end},'YYYY-MM-DD') AND TO_DATE(#{st},'YYYY-MM-DD')
				group by DECODE (CSPOSTTYPE,100,'공지글',200,'문의글', 300,'신고글',400,'이벤트')
    		</when>
    	</choose>
	</select>
	
	<!-- 셀렉트 조회  매출 통계 컬럼 차트 -->
	<select id="selectColumnChart" resultMap="e_p006Result06" parameterType="java.util.Map">
	<![CDATA[
	select to_char(p.CREATEDAT, 'YYYY-MM-DD')as createdatString, sum(o.paytotal + o.charge)as sumPrice
	from orders o INNER JOIN payment p
	ON o.ordernum = p.ordernum
    
	]]>
	<choose>
	
    		<when test="key_word=='all'"> <!-- 전체 조회  -->
    		WHERE p.type != 'cancel' 
			AND p.type != 'canceled'
			AND o.orderstatus =2
    		GROUP BY to_char(p.CREATEDAT, 'YYYY-MM-DD')
			ORDER BY createdatString ASC
    		</when>
    		<when test="key_word=='toDay'"> <!-- 당일 조회 -->
     		WHERE p.createdat >= TO_DATE(#{st},'YYYY-MM-DD')
     		AND p.type != 'canceled'
			AND p.type != 'cancel'
			AND o.orderstatus =2
			GROUP BY to_char(p.CREATEDAT, 'YYYY-MM-DD')
			ORDER BY createdatString ASC
    		</when>
    		<when test="key_word=='week_month'"> <!-- 1주, 2주, 1개월 조회 -->
    		WHERE p.createdat BETWEEN TO_DATE(#{end},'YYYY-MM-DD') AND TO_DATE(#{st},'YYYY-MM-DD')
    		AND p.type != 'canceled'
			AND p.type != 'cancel'
			AND o.orderstatus =2
			GROUP BY to_char(p.CREATEDAT, 'YYYY-MM-DD')
			ORDER BY createdatString ASC
    		</when>
    	</choose>
	</select>
   
   <!-- 셀렉트 조회 가입자 통계 -->
   	<select id="selectUserLineChart" resultMap="e_p006Result06" parameterType="java.util.Map">
	<![CDATA[
	select to_char(createdat, 'YYYY-MM-DD')as userCreatedat, count(DECODE(sex,10,'남자'))as man, count(DECODE(sex ,20, '여자'))as woman, COUNT(*)as allUser
	FROM users
	]]>
	<choose>
    		<when test="key_word=='all'"> <!-- 전체 조회  -->
    		group by to_char(createdat, 'YYYY-MM-DD')
    		ORDER BY userCreatedat
    		</when>
    		<when test="key_word=='toDay'"> <!-- 당일 조회 -->
			WHERE createdat >= TO_DATE(#{st},'YYYY-MM-DD')
			group by to_char(createdat, 'YYYY-MM-DD')
			ORDER BY userCreatedat
    		</when>
    		<when test="key_word=='week_month'"> <!-- 1주, 2주, 1개월 조회 -->
    		WHERE createdat BETWEEN TO_DATE(#{end},'YYYY-MM-DD') AND TO_DATE(#{st},'YYYY-MM-DD')
			group by to_char(createdat, 'YYYY-MM-DD')
			ORDER BY userCreatedat
    		</when>
    	</choose>
	</select>
	
	 <!-- 셀렉트 조회 가입자 바 차트 통계 -->
   	<select id="selectUserBarChart" resultMap="e_p006Result06" parameterType="java.util.Map">
	<![CDATA[
	select  count(DECODE(sex,10,'남자'))as man, count(DECODE(sex ,20, '여자'))as woman, COUNT(*)as allUser
	FROM users
	]]>
	<choose>
    		<when test="key_word=='all'"> <!-- 전체 조회  -->
    	
    		</when>
    		<when test="key_word=='toDay'"> <!-- 당일 조회 -->
			WHERE createdat >= TO_DATE(#{st},'YYYY-MM-DD')
    		</when>
    		<when test="key_word=='week_month'"> <!-- 1주, 2주, 1개월 조회 -->
    		WHERE createdat BETWEEN TO_DATE(#{end},'YYYY-MM-DD') AND TO_DATE(#{st},'YYYY-MM-DD')
    		</when>
    	</choose>
	</select>
	
		 <!-- 셀렉트 조회 카테고리별 판매 통계 -->
   	<select id="selectCategoryChart" resultMap="e_p006Result06" parameterType="java.util.Map">
	<![CDATA[
	SELECT DISTINCT to_char(pay.createdat,'YYYY-MM-DD')as ordereDatString,
    DECODE(sum(a.totalquantity1),null,0,sum(a.totalquantity1))as type1,
    DECODE(sum(b.totalquantity2),null,0,sum(b.totalquantity2))as type2,
    DECODE(sum(c.totalquantity3),null,0,sum(c.totalquantity3))as type3
    FROM   orders o FULL OUTER JOIN (
                                SELECT sum(od.quantity)as totalquantity1,
                            to_char(od.ordereDat,'YYYY-MM-DD')as ordereDatString,
                            DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품')as categorType1,
                            od.ordernum
                    FROM products pd
                        INNER JOIN orders od
                    ON od.prodnum = pd.prodnum
                        INNER JOIN (SELECT CONNECT_BY_ROOT(pc.prodcategorynum)as top,pc.categoryname, pc.prodcategorynum
                                    FROM prodcategory pc
                                    START WITH pc.PARENTCATEGORYNUM is null
                                    CONNECT BY PRIOR pc.PRODCATEGORYNUM = pc.PARENTCATEGORYNUM)aa
                    ON aa.prodcategorynum = pd.prodcategorynum
                        WHERE od.orderstatus = 2
                        AND aa.top=1
                            group by to_char(od.ordereDat,'YYYY-MM-DD'), DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품'),od.ordernum
                        )a
                            ON a.ordernum = o.ordernum
                    FULL OUTER JOIN (SELECT sum(od.quantity)as totalquantity2,
                            to_char(od.ordereDat,'YYYY-MM-DD')as ordereDatString,
                            DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품')as categorType2,
                            od.ordernum
                    FROM products pd
                        INNER JOIN orders od
                    ON od.prodnum = pd.prodnum
                        INNER JOIN (SELECT CONNECT_BY_ROOT(pc.prodcategorynum)as top,pc.categoryname, pc.prodcategorynum
                                    FROM prodcategory pc
                                    START WITH pc.PARENTCATEGORYNUM is null
                                    CONNECT BY PRIOR pc.PRODCATEGORYNUM = pc.PARENTCATEGORYNUM)aa
                    ON aa.prodcategorynum = pd.prodcategorynum
                        WHERE od.orderstatus = 2
                        AND aa.top=2
                            group by to_char(od.ordereDat,'YYYY-MM-DD'), DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품'),od.ordernum
                        )b
                            ON b.ordernum = o.ordernum
                    FULL OUTER JOIN (
                            SELECT sum(od.quantity)as totalquantity3,
                            to_char(od.ordereDat,'YYYY-MM-DD')as ordereDatString,
                            DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품')as categorType2,
                            od.ordernum
                    FROM products pd
                        INNER JOIN orders od
                    ON od.prodnum = pd.prodnum
                        INNER JOIN (SELECT CONNECT_BY_ROOT(pc.prodcategorynum)as top,pc.categoryname, pc.prodcategorynum
                                    FROM prodcategory pc
                                    START WITH pc.PARENTCATEGORYNUM is null
                                    CONNECT BY PRIOR pc.PRODCATEGORYNUM = pc.PARENTCATEGORYNUM)aa
                    ON aa.prodcategorynum = pd.prodcategorynum
                        WHERE od.orderstatus = 2
                        AND aa.top=3
                            group by to_char(od.ordereDat,'YYYY-MM-DD'), DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품'),od.ordernum
                    )c
                        ON c.ordernum = o.ordernum
            INNER JOIN payment pay
                   ON pay.ordernum=o.ordernum
            WHERE pay.type !='cancel'
            AND pay.type != 'canceled'           
		    AND o.orderstatus = 2     
	]]>
	<choose>
    		<when test="key_word=='all'"> <!-- 전체 조회  -->
    		group by to_char(pay.createdat,'YYYY-MM-DD')
		    ORDER BY ordereDatString
    		</when>
    		<when test="key_word=='toDay'"> <!-- 당일 조회 -->
		    AND pay.createdat >= TO_DATE(#{st},'YYYY-MM-DD')
		    group by to_char(pay.createdat,'YYYY-MM-DD')
		    ORDER BY ordereDatString
    		</when>
    		<when test="key_word=='week_month'"> <!-- 1주, 2주, 1개월 조회 -->
		    AND pay.createdat BETWEEN TO_DATE (#{end},'YYYY-MM-DD')
								AND TO_DATE(#{st},'YYYY-MM-DD')
		    group by to_char(pay.createdat,'YYYY-MM-DD')
		    ORDER BY ordereDatString
    		</when>
    	</choose>
	</select>
	
	
		 <!-- 00000000000000000000000000000000000000000000000   메인 페이지 통계 그레프  00000000000000000000000000000000000000000000000000000-->
   	<select id="payChart" resultMap="e_p006Result06" parameterType="java.util.Map">
	<![CDATA[
	SELECT  DECODE(sum(a.sumPrice),null,0,sum(a.sumPrice))as totalPrice, 
			DECODE(sum(c.cancelPrice),null,0,sum(c.cancelPrice))as totalCancel, 
			to_char(b.dt,'MM-DD')AS datString 
    			 FROM ( SELECT TO_CHAR(p.createdat, 'YYYY-MM-DD') AS hiredate
			              , sum(o.paytotal + o.charge)sumPrice
			           FROM orders o INNER JOIN payment p 
			           on o.ordernum=p.ordernum
			          WHERE p.createdat BETWEEN TO_DATE( #{end}, 'YYYY-MM-DD')
			                             AND TO_DATE( #{st} , 'YYYY-MM-DD') 
			                             AND o.orderstatus = 2
		                                 AND p.type != 'canceled'
		                                 AND p.type != 'cancel'
			          GROUP BY TO_CHAR(p.createdat, 'YYYY-MM-DD')
			        ) a ,(SELECT TO_CHAR(p.createdat, 'YYYY-MM-DD') AS hiredate1
			              , sum(o.paytotal + o.charge)as cancelPrice
			           FROM orders o INNER JOIN payment p 
			           on o.ordernum=p.ordernum
			          WHERE p.createdat BETWEEN TO_DATE( #{end}, 'YYYY-MM-DD')
			                             AND TO_DATE( #{st} , 'YYYY-MM-DD') 
		                                 AND p.type = 'canceled'
		                               
			          GROUP BY TO_CHAR(p.createdat, 'YYYY-MM-DD')
                    
                    )c
			      , ( SELECT TO_DATE( #{end} ,'YYYY-MM-DD') + LEVEL - 1 AS dt
			            FROM dual 
			         CONNECT BY LEVEL <= (TO_DATE( #{st} ,'YYYY-MM-DD') 
			                            - TO_DATE( #{end} ,'YYYY-MM-DD') + 1)
			        ) b
				WHERE b.dt = a.hiredate(+)
                and b.dt = c.hiredate1(+) 
                group by to_char(b.dt,'MM-DD') 
				ORDER BY datString
	]]>
	
	</select>
	
	<!-- 메인 페이지 파이차트 (상품 조회수  ) -->
	<select id="categoryChart" resultMap="e_p006Result06" parameterType="java.util.Map">
	<![CDATA[
		SELECT  sum(CNTCOUNT)as sumCnt,
				DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품')as categorType             
        FROM products pd1
            INNER JOIN (SELECT CONNECT_BY_ROOT(pc.prodcategorynum)as top,pc.categoryname, pc.prodcategorynum
                           FROM prodcategory pc
                           START WITH pc.PARENTCATEGORYNUM is null
                           CONNECT BY PRIOR pc.PRODCATEGORYNUM = pc.PARENTCATEGORYNUM)aa
       ON aa.prodcategorynum = pd1.prodcategorynum
           group by DECODE(aa.top,1,'의류',2,'잡화',3,'등산용품') 
	]]>
	
	</select>
	
</mapper>